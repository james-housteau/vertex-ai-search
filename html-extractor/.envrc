# Project Development Environment
# Automatically loads when entering the directory (requires direnv)

# Set project environment variables
export PROJECT_NAME="html-extractor"
export PROJECT_MODE="development"
export ENV="development"
export SERVICE="html-extractor"
export AI_SAFETY_MODE="enforced"
export LOG_LEVEL="info"
export LOG_JSON="false"
export LOG_TIMESTAMP="true"
export LOG_CALLER="false"

# Module-specific configuration for html-extractor
export HTML_EXTRACTOR_INPUT_DIR="../nq-downloader/data"
export HTML_EXTRACTOR_OUTPUT_DIR="data/html"
export HTML_EXTRACTOR_LIMIT="1600"
export HTML_EXTRACTOR_SKIP_EMPTY="true"
export HTML_EXTRACTOR_PRESERVE_STRUCTURE="true"

# File limits
export AI_MAX_FILES="60"
export MAX_PROJECT_FILES="1000"

# Development tool versions
export PYTHON_VERSION="3.13"

# Project paths
export PROJECT_ROOT="$(pwd)"

# Auto-detect project type and set paths accordingly
if [[ -f "pyproject.toml" ]] && [[ -d "src" ]]; then
  # Python project with src layout
  export PROJECT_TYPE="python-package"
  export SRC_DIR="${PROJECT_ROOT}/src"
  export DIST_DIR="${PROJECT_ROOT}/dist"
  echo "üì¶ Detected: Python Package Project"
elif [[ -f "pyproject.toml" ]]; then
  # Simple Python project
  export PROJECT_TYPE="python-simple"
  export SRC_DIR="${PROJECT_ROOT}"
  echo "üì¶ Detected: Simple Python Project"
else
  # Generic project - minimal assumptions
  export PROJECT_TYPE="generic"
  export SRC_DIR="${PROJECT_ROOT}/src"
  echo "üì¶ Detected: Generic Project"
fi

# Tool configuration
export COVERAGE_FILE="${PROJECT_ROOT}/.coverage"

# AI Safety reminders
echo "üîí AI Safety: Max ${AI_MAX_FILES} files per component"

# Count files respecting .gitignore and excluding temporary/cache directories
if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
  # Count only committed files and ignore untracked temporary directories
  committed_files=$(git ls-files --cached | wc -l | tr -d ' ')
  untracked_files=$(git ls-files --others --exclude-standard | { grep -v -E '^(tmp|pytest-)' || true; } | wc -l | tr -d ' ')
  file_count=$((committed_files + untracked_files))
  echo "üìÅ html-extractor file count: ${file_count} (${committed_files} tracked, ${untracked_files} untracked)"
else
  file_count=$(find . -type f -not -path "./.venv/*" -not -path "./tmp*" -not -path "./pytest-*" | wc -l | tr -d ' ')
  echo "üìÅ html-extractor file count: ${file_count} (no git)"
fi

# Warn if too many files
if [ "$file_count" -gt 100 ]; then
  echo "‚ö†Ô∏è  WARNING: ${file_count} files detected - consider using sparse worktree"
fi

# Activate Poetry virtual environment if it exists
if [[ -d ".venv" ]]; then
    export VIRTUAL_ENV="${PROJECT_ROOT}/.venv"
    export PATH="${VIRTUAL_ENV}/bin:$PATH"
    # Set PS1 to show we're in the virtual environment
    export VIRTUAL_ENV_PROMPT="(html-extractor) "
    echo "üêç Python virtual environment activated: html-extractor"
fi

# Load local overrides if they exist
if [[ -f ".envrc.local" ]]; then
  source_env .envrc.local
fi

echo "‚úÖ Environment configured for html-extractor development"
