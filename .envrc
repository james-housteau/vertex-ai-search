# Vertex AI Search Project - Root Environment Configuration
# This sets up common variables shared across all modules

# =============================================================================
# GCP Configuration (REQUIRED - Set these to your values)
# =============================================================================
export GOOGLE_CLOUD_PROJECT="${GOOGLE_CLOUD_PROJECT:-your-project-id}"
export GOOGLE_APPLICATION_CREDENTIALS="${GOOGLE_APPLICATION_CREDENTIALS:-}"
export VERTEX_AI_REGION="${VERTEX_AI_REGION:-us-central1}"

# =============================================================================
# Project Metadata
# =============================================================================
export PROJECT_NAME="vertex-ai-search"
export PROJECT_MODE="development"
export ENV="development"

# =============================================================================
# Common Development Settings
# =============================================================================
export LOG_LEVEL="info"
export LOG_JSON="false"
export LOG_TIMESTAMP="true"
export LOG_CALLER="false"
export AI_SAFETY_MODE="enforced"

# =============================================================================
# Python Configuration
# =============================================================================
export PYTHON_VERSION="3.13"

# =============================================================================
# AI Safety Limits (Pure Module Isolation)
# =============================================================================
export AI_MAX_FILES="60"           # Max files per module
export MAX_PROJECT_FILES="1000"    # Max files for entire project

# =============================================================================
# Project Paths
# =============================================================================
export PROJECT_ROOT="$(pwd)"

# =============================================================================
# Vector Search Pipeline Defaults
# =============================================================================
export EMBEDDING_MODEL="text-embedding-004"
export EMBEDDING_DIMENSIONS="768"
export VECTOR_INDEX_DISTANCE_MEASURE="DOT_PRODUCT_DISTANCE"

# =============================================================================
# Module-Specific Defaults (can be overridden in each module)
# =============================================================================
export CHUNKER_CHUNK_SIZE="450"
export CHUNKER_OVERLAP="80"
export CACHE_TTL="300"
export CACHE_MAXSIZE="1000"

# =============================================================================
# File Count and Safety Checks
# =============================================================================
echo ""
echo "🔵 Vertex AI Search - Root Environment"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
  committed_files=$(git ls-files --cached | wc -l | tr -d ' ')
  untracked_files=$(git ls-files --others --exclude-standard | { grep -v -E '^(tmp|pytest-|\.venv|htmlcov|\.coverage)' || true; } | wc -l | tr -d ' ')
  total_files=$((committed_files + untracked_files))

  echo "📁 Total files: ${total_files} (${committed_files} tracked, ${untracked_files} untracked)"

  # Count modules
  module_count=$(find . -maxdepth 2 -name "pyproject.toml" -type f | wc -l | tr -d ' ')
  echo "📦 Modules: ${module_count}"

  if [ "$total_files" -gt 1000 ]; then
    echo "⚠️  WARNING: Project has ${total_files} files - use module-level worktrees"
  fi
fi

echo "🔒 AI Safety: Max ${AI_MAX_FILES} files per module"
echo ""

# GCP Configuration Check
if [ "$GOOGLE_CLOUD_PROJECT" = "your-project-id" ]; then
  echo "⚠️  WARNING: GOOGLE_CLOUD_PROJECT not set!"
  echo "    Set it in .envrc.local or export it in your shell:"
  echo "    export GOOGLE_CLOUD_PROJECT='your-actual-project-id'"
  echo ""
else
  echo "🔑 GCP Project: ${GOOGLE_CLOUD_PROJECT}"
  echo "🌍 Region: ${VERTEX_AI_REGION}"
  echo ""
fi

# Credentials Check
if [ -z "$GOOGLE_APPLICATION_CREDENTIALS" ]; then
  echo "ℹ️  Using Application Default Credentials (ADC)"
  echo "   Run: gcloud auth application-default login"
elif [ -f "$GOOGLE_APPLICATION_CREDENTIALS" ]; then
  echo "🔐 Service Account: $(basename $GOOGLE_APPLICATION_CREDENTIALS)"
else
  echo "⚠️  Service account file not found: $GOOGLE_APPLICATION_CREDENTIALS"
fi

echo ""
echo "💡 Tip: cd into any module directory to load module-specific config"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""

# =============================================================================
# Local Overrides (for your personal settings)
# =============================================================================
# Create a .envrc.local file (gitignored) with your personal settings:
#
# Example .envrc.local:
# export GOOGLE_CLOUD_PROJECT="my-actual-project"
# export GOOGLE_APPLICATION_CREDENTIALS="/path/to/service-account.json"
# export VECTOR_INDEX_ENDPOINT_ID="1234567890"
#
if [[ -f ".envrc.local" ]]; then
  source_env .envrc.local
  echo "✅ Loaded .envrc.local overrides"
  echo ""
fi
