# Project Development Environment
# Automatically loads when entering the directory (requires direnv)

# Set project environment variables
export PROJECT_NAME="embedding-generator"
export PROJECT_MODE="development"
export ENV="development"
export SERVICE="embedding-generator"
export AI_SAFETY_MODE="enforced"
export LOG_LEVEL="info"
export LOG_JSON="false"
export LOG_TIMESTAMP="true"
export LOG_CALLER="false"

# Module-specific configuration for embedding-generator
export GOOGLE_CLOUD_PROJECT="${GOOGLE_CLOUD_PROJECT:-your-project-id}"
export GOOGLE_APPLICATION_CREDENTIALS="${GOOGLE_APPLICATION_CREDENTIALS:-}"
export EMBEDDING_MODEL="text-embedding-004"
export EMBEDDING_DIMENSIONS="768"
export EMBEDDING_BATCH_SIZE="100"
export EMBEDDING_RATE_LIMIT="1000"  # requests per minute
export EMBEDDING_INPUT_DIR="../html-chunker/data/chunks"
export EMBEDDING_OUTPUT_DIR="data/embeddings"
export EMBEDDING_REGION="us-central1"

# File limits
export AI_MAX_FILES="60"
export MAX_PROJECT_FILES="1000"

# Development tool versions
export PYTHON_VERSION="3.13"

# Project paths
export PROJECT_ROOT="$(pwd)"

# Auto-detect project type and set paths accordingly
if [[ -f "pyproject.toml" ]] && [[ -d "src" ]]; then
  export PROJECT_TYPE="python-package"
  export SRC_DIR="${PROJECT_ROOT}/src"
  export DIST_DIR="${PROJECT_ROOT}/dist"
  echo "📦 Detected: Python Package Project"
elif [[ -f "pyproject.toml" ]]; then
  export PROJECT_TYPE="python-simple"
  export SRC_DIR="${PROJECT_ROOT}"
  echo "📦 Detected: Simple Python Project"
else
  export PROJECT_TYPE="generic"
  export SRC_DIR="${PROJECT_ROOT}/src"
  echo "📦 Detected: Generic Project"
fi

# Tool configuration
export COVERAGE_FILE="${PROJECT_ROOT}/.coverage"

# AI Safety reminders
echo "🔒 AI Safety: Max ${AI_MAX_FILES} files per component"

# Count files
if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
  committed_files=$(git ls-files --cached | wc -l | tr -d ' ')
  untracked_files=$(git ls-files --others --exclude-standard | { grep -v -E '^(tmp|pytest-)' || true; } | wc -l | tr -d ' ')
  file_count=$((committed_files + untracked_files))
  echo "📁 embedding-generator file count: ${file_count} (${committed_files} tracked, ${untracked_files} untracked)"
else
  file_count=$(find . -type f -not -path "./.venv/*" -not -path "./tmp*" -not -path "./pytest-*" | wc -l | tr -d ' ')
  echo "📁 embedding-generator file count: ${file_count} (no git)"
fi

# Warn if too many files
if [ "$file_count" -gt 100 ]; then
  echo "⚠️  WARNING: ${file_count} files detected - consider using sparse worktree"
fi

# Activate Poetry virtual environment if it exists
if [[ -d ".venv" ]]; then
    export VIRTUAL_ENV="${PROJECT_ROOT}/.venv"
    export PATH="${VIRTUAL_ENV}/bin:$PATH"
    export VIRTUAL_ENV_PROMPT="(embedding-generator) "
    echo "🐍 Python virtual environment activated: embedding-generator"
fi

# Load local overrides if they exist
if [[ -f ".envrc.local" ]]; then
  source_env .envrc.local
fi

echo "✅ Environment configured for embedding-generator development"
echo "🔑 GCP Project: ${GOOGLE_CLOUD_PROJECT}"
