#!/bin/bash
set -euo pipefail

# Genesis Version Management - Bump Script
# Auto-generated by Genesis - Safe to customize for your project
# Usage: ./.genesis/scripts/bump-version.sh [major|minor|patch]

BUMP_TYPE=${1:-minor}

echo "üî¢ Bumping $BUMP_TYPE version..."

# Validate bump type
case $BUMP_TYPE in
    major|minor|patch)
        ;;
    *)
        echo "‚ùå Error: Invalid bump type '$BUMP_TYPE'"
        echo "Usage: $0 [major|minor|patch]"
        exit 1
        ;;
esac

# Change to project root
cd "$(dirname "$0")/../.."

# Check if we're in a git repository
if [[ ! -d ".git" ]]; then
    echo "‚ùå Error: Not in a git repository"
    exit 1
fi

# Check for uncommitted changes
if ! git diff-index --quiet HEAD --; then
    echo "‚ùå Error: Uncommitted changes detected. Please commit or stash changes first."
    exit 1
fi

# Detect project type and bump version accordingly
if [[ -f "pyproject.toml" && -x "$(command -v poetry)" ]]; then
    # Python project with Poetry
    echo "üì¶ Updating pyproject.toml version (Poetry)..."
    poetry version $BUMP_TYPE
    NEW_VERSION=$(poetry version -s)
elif [[ -f "pyproject.toml" ]]; then
    # Python project without Poetry - use Genesis version utility
    echo "üì¶ Updating pyproject.toml version (Genesis utility)..."
    python .genesis/scripts/version.py bump $BUMP_TYPE
    NEW_VERSION=$(python .genesis/scripts/version.py show)
elif [[ -f "package.json" ]]; then
    # Node.js/TypeScript project
    echo "üì¶ Updating package.json version..."
    if command -v npm >/dev/null 2>&1; then
        npm version $BUMP_TYPE --no-git-tag-version
        NEW_VERSION=$(node -p "require('./package.json').version")
    else
        python .genesis/scripts/version.py bump $BUMP_TYPE
        NEW_VERSION=$(python .genesis/scripts/version.py show)
    fi
else
    echo "‚ùå Error: No supported version files found (pyproject.toml, package.json)"
    exit 1
fi

echo "‚úÖ New version: $NEW_VERSION"

# Sync version to other project files
echo "üîÑ Syncing version across project files..."
python .genesis/scripts/version.py sync --version "$NEW_VERSION"

# Update README.md files if they exist
echo "üìù Updating README.md files..."

# Main README.md
if [[ -f "README.md" ]]; then
    # Update version references in README
    sed -i.bak "s/vertex-ai-search (v[0-9]\+\.[0-9]\+\.[0-9]\+)/vertex-ai-search (v$NEW_VERSION)/g" README.md 2>/dev/null || true
    sed -i.bak "s/Version [0-9]\+\.[0-9]\+\.[0-9]\+/Version $NEW_VERSION/g" README.md 2>/dev/null || true
    rm README.md.bak 2>/dev/null || true
    echo "  ‚úÖ Updated README.md"
fi

# Check for other version references (excluding common false positives)
echo "üîç Checking for other version references..."
OLD_REFS=$(grep -r "v[0-9]\+\.[0-9]\+\.[0-9]\+" . \
    --include="*.md" --include="*.toml" --include="*.json" --include="*.yml" --include="*.yaml" \
    --exclude-dir=".venv" --exclude-dir="venv" --exclude-dir="node_modules" --exclude-dir=".git" \
    | grep -v "v$NEW_VERSION" \
    | grep -v "Python\|python\|py3\|target-version\|requires-python\|node" \
    | head -5 || true)

if [[ -n "$OLD_REFS" ]]; then
    echo "‚ö†Ô∏è  Found potential version references to review:"
    echo "$OLD_REFS"
    echo ""
    echo "üí° Review these manually if they should be updated"
fi

# Show what changed
echo ""
echo "üìã Summary of changes:"
echo "  Version: $NEW_VERSION"
echo "  Files potentially updated:"
echo "    - pyproject.toml / package.json"
echo "    - README.md"
echo "    - __init__.py files with __version__"

echo ""
echo "üéâ Version bump complete!"
echo ""
echo "Next steps:"
echo "  1. Review changes: git diff"
echo "  2. Commit changes: git add -A && git commit -m 'bump: version $NEW_VERSION'"
echo "  3. Tag release: git tag v$NEW_VERSION"
echo "  4. Push changes: git push && git push --tags"
