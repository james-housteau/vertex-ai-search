# Project Development Environment
# Automatically loads when entering the directory (requires direnv)

# Git Author Configuration (Genesis Toolkit Bot)
export GIT_AUTHOR_NAME="Genesis"
export GIT_AUTHOR_EMAIL="genesis@local"
export GIT_COMMITTER_NAME="Genesis"
export GIT_COMMITTER_EMAIL="genesis@local"

# Set project environment variables (generic for any project)
export PROJECT_NAME="${PWD##*/}"  # Auto-detect from directory name
export PROJECT_MODE="development"
export ENV="development"  # Required by Genesis core
export SERVICE="${PWD##*/}"  # Use directory name as service name
export AI_SAFETY_MODE="enforced"
export LOG_LEVEL="info"
export LOG_JSON="false"
export LOG_TIMESTAMP="true"
export LOG_CALLER="false"

# Genesis Development Mode - enables filesystem template access
export GENESIS_DEV_MODE="true"

# Circuit breaker configuration
export CB_FAILURE_THRESHOLD="5"
export CB_TIMEOUT="60.0"
export CB_HALF_OPEN_MAX_CALLS="5"
export CB_SUCCESS_THRESHOLD="1"
export CB_SLIDING_WINDOW_SIZE="10"

# Retry configuration
export RETRY_MAX_ATTEMPTS="3"
export RETRY_INITIAL_DELAY="1.0"
export RETRY_MAX_DELAY="60.0"
export RETRY_EXPONENTIAL_BASE="2.0"

# AutoFix configuration
export AUTOFIX_MAX_ITERATIONS="3"
export AUTOFIX_MAX_RUNS="5"

# Script configuration (avoid hardcoded values in scripts)
export MANIFEST_SIZE_THRESHOLD="5000"
export ORIGINAL_MANIFEST_SIZE="20000"

# Test configuration (avoid hardcoded values in tests)
export TEST_EXPRESS_PORT="3000"
export TEST_DEVELOPMENT_PORT="8080"
export TEST_GITHUB_RATE_LIMIT="5000"

# Container configuration (docker-compose file auto-detected from project root)

# File limits
export AI_MAX_FILES="550"  # Increased to accommodate project growth
export MAX_PROJECT_FILES="1000"

# Development tool versions
export PYTHON_VERSION="3.13"
export NODE_VERSION="20"

# Project paths (auto-detected based on project structure)
export PROJECT_ROOT="$(pwd)"

# Auto-detect project type and set paths accordingly
if [[ -f "pyproject.toml" ]] && [[ -d "genesis" ]]; then
  # Genesis toolkit project
  export PROJECT_TYPE="genesis-toolkit"
  export TEMPLATES_DIR="${PROJECT_ROOT}/templates"
  export SHARED_PYTHON_DIR="${PROJECT_ROOT}/genesis"
  export CLI_DIR="${PROJECT_ROOT}/genesis"
  echo "üì¶ Detected: Genesis Toolkit Project"
elif [[ -f "package.json" ]] && [[ -d "src" ]]; then
  # TypeScript/Node project
  export PROJECT_TYPE="typescript-service"
  export SRC_DIR="${PROJECT_ROOT}/src"
  export DIST_DIR="${PROJECT_ROOT}/dist"
  echo "üì¶ Detected: TypeScript/Node Project"
elif [[ -f "pyproject.toml" ]] && [[ -d "src" ]]; then
  # Python project with src layout
  export PROJECT_TYPE="python-package"
  export SRC_DIR="${PROJECT_ROOT}/src"
  export DIST_DIR="${PROJECT_ROOT}/dist"
  echo "üì¶ Detected: Python Package Project"
elif [[ -f "pyproject.toml" ]]; then
  # Simple Python project
  export PROJECT_TYPE="python-simple"
  export SRC_DIR="${PROJECT_ROOT}"
  echo "üì¶ Detected: Simple Python Project"
else
  # Generic project - minimal assumptions
  export PROJECT_TYPE="generic"
  export SRC_DIR="${PROJECT_ROOT}/src"
  echo "üì¶ Detected: Generic Project"
fi

# Tool configuration
export COVERAGE_FILE="${PROJECT_ROOT}/.coverage"

# AI Safety reminders (works for any project)
echo "üîí AI Safety: Max ${AI_MAX_FILES} files per component"

# Count files respecting .gitignore and excluding temporary/cache directories
if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
  # Count only committed files and ignore untracked temporary directories
  committed_files=$(git ls-files --cached | wc -l | tr -d ' ')
  untracked_files=$(git ls-files --others --exclude-standard | { grep -v -E '^(tmp|pytest-)' || true; } | wc -l | tr -d ' ')
  file_count=$((committed_files + untracked_files))
  echo "üìÅ ${PROJECT_NAME} file count: ${file_count} (${committed_files} tracked, ${untracked_files} untracked)"
else
  file_count=$(find . -type f -not -path "./.venv/*" -not -path "./tmp*" -not -path "./pytest-*" | wc -l | tr -d ' ')
  echo "üìÅ ${PROJECT_NAME} file count: ${file_count} (no git)"
fi

# Warn if too many files (increased threshold for Genesis development)
if [ "$file_count" -gt 600 ]; then
  echo "‚ö†Ô∏è  WARNING: ${file_count} files detected - consider using sparse worktree"
fi

# AI Protection handled by file count warnings above

# Claude Code Telemetry and Monitoring
# DISABLED - Only enable during /solve command execution
# export CLAUDE_CODE_ENABLE_TELEMETRY=1

# DISABLED - No console output by default
# export OTEL_METRICS_EXPORTER=console
# export OTEL_LOGS_EXPORTER=console
# export OTEL_TRACES_EXPORTER=console

# Service identification (kept for when telemetry is enabled)
export OTEL_SERVICE_NAME=genesis-solve
export OTEL_SERVICE_VERSION=1.0.0

# Quiet logging by default
export OTEL_LOG_LEVEL=error

# Optional: Send to OTLP collector if available
# export OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317
# export OTEL_EXPORTER_OTLP_PROTOCOL=grpc

# GitHub Packages authentication for Genesis CLI and shared-core
# Load GitHub token from secrets folder if it exists
if [[ -f ".secrets/github_token" ]]; then
  export GITHUB_TOKEN="$(cat .secrets/github_token | tr -d '\n')"
  echo "üîë GitHub token loaded from .secrets/github_token"
else
  echo "‚ö†Ô∏è  Warning: .secrets/github_token not found"
fi

# Activate Poetry virtual environment if it exists
if [[ -d ".venv" ]]; then
    export VIRTUAL_ENV="$(pwd)/.venv"
    export PATH="${VIRTUAL_ENV}/bin:$PATH"
    # Set PS1 to show we're in the virtual environment
    export VIRTUAL_ENV_PROMPT="(${PROJECT_NAME}) "
    echo "üêç Python virtual environment activated: ${PROJECT_NAME}"
fi

# Load local overrides if they exist
if [[ -f ".envrc.local" ]]; then
  source_env .envrc.local
fi
