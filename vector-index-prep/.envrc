# Project Development Environment
# Automatically loads when entering the directory (requires direnv)

# Set project environment variables
export PROJECT_NAME="vector-index-prep"
export PROJECT_MODE="development"
export ENV="development"
export SERVICE="vector-index-prep"
export AI_SAFETY_MODE="enforced"
export LOG_LEVEL="info"
export LOG_JSON="false"
export LOG_TIMESTAMP="true"
export LOG_CALLER="false"

# Module-specific configuration for vector-index-prep
export GOOGLE_CLOUD_PROJECT="${GOOGLE_CLOUD_PROJECT:-your-project-id}"
export VECTOR_INDEX_INPUT_DIR="../embedding-generator/data/embeddings"
export VECTOR_INDEX_OUTPUT_FILE="data/index-data.jsonl"
export VECTOR_INDEX_DIMENSIONS="768"
export VECTOR_INDEX_DISTANCE_MEASURE="DOT_PRODUCT_DISTANCE"
export VECTOR_INDEX_GCS_BUCKET="${GOOGLE_CLOUD_PROJECT}-vector-index"
export VECTOR_INDEX_GCS_PREFIX="vector-search-data"

# File limits
export AI_MAX_FILES="60"
export MAX_PROJECT_FILES="1000"

# Development tool versions
export PYTHON_VERSION="3.13"

# Project paths
export PROJECT_ROOT="$(pwd)"

# Auto-detect project type
if [[ -f "pyproject.toml" ]] && [[ -d "src" ]]; then
  export PROJECT_TYPE="python-package"
  export SRC_DIR="${PROJECT_ROOT}/src"
  export DIST_DIR="${PROJECT_ROOT}/dist"
  echo "üì¶ Detected: Python Package Project"
elif [[ -f "pyproject.toml" ]]; then
  export PROJECT_TYPE="python-simple"
  export SRC_DIR="${PROJECT_ROOT}"
  echo "üì¶ Detected: Simple Python Project"
else
  export PROJECT_TYPE="generic"
  export SRC_DIR="${PROJECT_ROOT}/src"
  echo "üì¶ Detected: Generic Project"
fi

# Tool configuration
export COVERAGE_FILE="${PROJECT_ROOT}/.coverage"

# AI Safety reminders
echo "üîí AI Safety: Max ${AI_MAX_FILES} files per component"

# Count files
if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
  committed_files=$(git ls-files --cached | wc -l | tr -d ' ')
  untracked_files=$(git ls-files --others --exclude-standard | { grep -v -E '^(tmp|pytest-)' || true; } | wc -l | tr -d ' ')
  file_count=$((committed_files + untracked_files))
  echo "üìÅ vector-index-prep file count: ${file_count} (${committed_files} tracked, ${untracked_files} untracked)"
else
  file_count=$(find . -type f -not -path "./.venv/*" -not -path "./tmp*" -not -path "./pytest-*" | wc -l | tr -d ' ')
  echo "üìÅ vector-index-prep file count: ${file_count} (no git)"
fi

# Activate Poetry virtual environment if it exists
if [[ -d ".venv" ]]; then
    export VIRTUAL_ENV="${PROJECT_ROOT}/.venv"
    export PATH="${VIRTUAL_ENV}/bin:$PATH"
    export VIRTUAL_ENV_PROMPT="(vector-index-prep) "
    echo "üêç Python virtual environment activated: vector-index-prep"
fi

# Load local overrides
if [[ -f ".envrc.local" ]]; then
  source_env .envrc.local
fi

echo "‚úÖ Environment configured for vector-index-prep development"
