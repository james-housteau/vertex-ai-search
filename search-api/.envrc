# Project Development Environment
# Automatically loads when entering the directory (requires direnv)

# Set project environment variables
export PROJECT_NAME="search-api"
export PROJECT_MODE="development"
export ENV="development"
export SERVICE="search-api"
export AI_SAFETY_MODE="enforced"
export LOG_LEVEL="info"
export LOG_JSON="false"
export LOG_TIMESTAMP="true"
export LOG_CALLER="false"

# Module-specific configuration for search-api
export GOOGLE_CLOUD_PROJECT="${GOOGLE_CLOUD_PROJECT:-your-project-id}"
export GOOGLE_APPLICATION_CREDENTIALS="${GOOGLE_APPLICATION_CREDENTIALS:-}"
export VERTEX_AI_REGION="us-central1"
export VECTOR_INDEX_ENDPOINT_ID="${VECTOR_INDEX_ENDPOINT_ID:-}"

# FastAPI Configuration
export API_HOST="0.0.0.0"
export API_PORT="8000"
export API_RELOAD="true"
export API_WORKERS="1"
export API_TIMEOUT="300"

# Cache Configuration
export CACHE_TTL="300"  # 5 minutes
export CACHE_MAXSIZE="1000"
export CACHE_HIT_TARGET_MS="10"  # <10ms for cache hits
export CACHE_MISS_TARGET_MS="120"  # <120ms for cache misses

# Search Configuration
export DEFAULT_TOP_K="10"
export MAX_TOP_K="100"
export MIN_TOP_K="1"

# Summarization Configuration
export SUMMARY_MODEL="gemini-1.5-flash"
export SUMMARY_MAX_TOKENS="150"
export SUMMARY_TEMPERATURE="0.3"
export SUMMARY_STREAM="true"

# Performance Targets
export P95_LATENCY_TARGET_MS="120"
export P99_LATENCY_TARGET_MS="200"

# File limits
export AI_MAX_FILES="60"
export MAX_PROJECT_FILES="1000"

# Development tool versions
export PYTHON_VERSION="3.13"

# Project paths
export PROJECT_ROOT="$(pwd)"

# Auto-detect project type
if [[ -f "pyproject.toml" ]] && [[ -d "src" ]]; then
  export PROJECT_TYPE="python-package"
  export SRC_DIR="${PROJECT_ROOT}/src"
  export DIST_DIR="${PROJECT_ROOT}/dist"
  echo "üì¶ Detected: Python Package Project"
fi

# Tool configuration
export COVERAGE_FILE="${PROJECT_ROOT}/.coverage"

# AI Safety reminders
echo "üîí AI Safety: Max ${AI_MAX_FILES} files per component"

# Count files
if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
  committed_files=$(git ls-files --cached | wc -l | tr -d ' ')
  untracked_files=$(git ls-files --others --exclude-standard | { grep -v -E '^(tmp|pytest-)' || true; } | wc -l | tr -d ' ')
  file_count=$((committed_files + untracked_files))
  echo "üìÅ search-api file count: ${file_count}"
fi

# Activate Poetry virtual environment
if [[ -d ".venv" ]]; then
    export VIRTUAL_ENV="${PROJECT_ROOT}/.venv"
    export PATH="${VIRTUAL_ENV}/bin:$PATH"
    export VIRTUAL_ENV_PROMPT="(search-api) "
    echo "üêç Python virtual environment activated"
fi

# Load local overrides
if [[ -f ".envrc.local" ]]; then
  source_env .envrc.local
fi

echo "‚úÖ Environment configured for search-api"
echo "üöÄ API will run on: http://${API_HOST}:${API_PORT}"
echo "üíæ Cache: ${CACHE_MAXSIZE} entries, ${CACHE_TTL}s TTL"
echo "üéØ Performance: <${P95_LATENCY_TARGET_MS}ms p95, <${P99_LATENCY_TARGET_MS}ms p99"
